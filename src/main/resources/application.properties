spring.profiles.active=${APP_PROFILE:test}

default.sender=santosediegocursos@gmail.com
default.recipient=santosediegocursos@gmail.com

#Para utilizar os serviços de email;
spring.mail.host=smtp.gmail.com
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false
spring.mail.properties.mail.smtp.starttls.enable = true
spring.mail.properties.mail.smtp.ssl.enable = true

#Devido a erros no programa ao rodar o test tive que add as configurações do email no properties 
#principal conforme comentários da aula;

#Aqui lançamos uma palavra que desejamos que seja o segredo do JWT,
#essa palavra será embaralhada no token
jwt.secret=SequenciaDeCaracteresParaAssinarToken
#definiremos o tempo de expiração da chave, em milissegundos;
jwt.expiration=86400000
#colocamos 24hs, segundo o professor o pessoal usa para um dia ou semana;

#Para o AWS: código de usuário e código de assesso pego quando foi gerado o usuário;
#Códigos padrão para a AWS
aws.access_key_id=${AWS_KEY:empty}
aws.secret_access_key=${AWS_SECRET:empty}
s3.bucket=${BUCKET_NAME:empty}
s3.region=${BUCKET_REGION:sa-east-1}

# Para o tamanho das imagens;
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_FILE_SIZE:10MB}
#http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html

# Para setar um prefixo nos arquivos de profile do cliente
img.prefix.client.profile=cp

# Tamanho padrão para imagem de profile
img.profile.size=200
